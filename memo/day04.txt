day04(java 2일차)
목표 -> 복습 -> 자료형과 변수 -> 제어문자, 출력메소드, 서식문자 -> 형변환


--------------------
0.복습
컴퓨터 = 하드웨어 + 운영체제(OS) + 소프트웨어
컴퓨터언어 : 저급언어, 고급언어
번역프로그램 : 컴파일러, 인터프리터

.java 파일 ---------> .class ----------> 실행결과
	  javac.exe	    java.exe

java 프로젝트 -> 패키지 -> 클래스파일 -> main 메소드

jvm, jre, jdk
JVM(Java Virtual Machine)
	운영체제에 맞춰서 java로 만든 프로그램 실행

JRE(Java Runtime Environment)
	JVM을 실행한다
	JVM을 실행할 때 필요한 라이브러리 파일 등을 가지고 있다

JDK(Java Development Kit)
	JRE을 포함한다
	JRE 외에 개발에 필요한 도구들을 가지고 있다

단축키
	ctrl + n 프로젝트, 패키지, 클래스 생성
	alt + v, 클래스 파일의 {} 영역 안에서 main + ctrl + space bar 엔터 : 메인 메소드 생성
	syso + ctrl + space bar 엔터 : 출력 메소드 생성
	ctrl + F11 : 실행
	ctrl + s : 저장
	ctrl + alt + 방향키 위, 아래 : 라인 한줄 복사
	alt + 방향키 위, 아래 : 라인 한줄 이동
	F2 : 파일명, 패키지명, 프로젝트명 변경
	ctrl + shift + f : 자동정렬
	
용어정리
 - 자바프로젝트
	하나의 프로그램 단위
	프로그램을 구성하는 것들을 모아둔 폴더

 - 패키지
	소스파일들의 묶음 단위
	프로젝트의 하위 폴더

 - 소스파일
	.java로 끝나는 파일이며 소스코드가 작성된다
	이클립스에서는 클래스 생성시 자동으로 클래스와 같은 이름으로 소스파일을 만들어준다

 - 클래스
	자바에서 모든 코드는 클래스 내부에서 작성된다
	클래스 이름은 첫자를 대문자로 작성해야한다
 	
 - 중괄호{}
	영역을 표시한다

 - 메소드
	이름뒤에 소괄호()가 있는 대부분의 명령어는 메소드이다
	키워드 뒤에 ()가 있는 명령어는 메소드가 아니다(ex : for(){})

 - 메인 메소드
	자바프로그램이 실행되면 메인 메소드의 코드가 실행된다
	프로그램이 시작되는 시작점(entry point)

 - 출력 메소드
	System.out.println("이름");
	콘솔창에 소괄호 안에 있는 것(값)을 출력한다

 - 콘솔창
	입력과 출력이 가능한 창
	컴퓨터와 개발자가 의사소통할 수 있는 창
	개발자가 제대로 된 코드를 작성했는지 확인하기 위해서 사용한다

 - .(닷 연산자, 하위 연산자)
	.
	~ 안에 라고 해석한다
 
 - 세미콜론 ;
	문장의 끝을 표시한다

 - 들여쓰기
	자바에서는 들여쓰기가 코드에 영향을 끼치지 않는다
	가독성을 높이기 위해 사용한다

 - 주석
	코드에 영향을 끼치지 않는다
	내가 쓴 코드를 다른 사람에게 설명하기 위한 설명글
	잠시 일부 코드를 제외하고 실행시켜야 할 때
	자바 배울 동안은 주석을 통해 코드해석, 로직구성을 필수로 진행한다
	한줄 주석 //, 범위주석 /* */, api주석	/** */

1. 자료형(Type) : 값의 종류
	자료형	type	byte	값의 의미			예시
	정수형	int	4	양의 정수, 음의정수, 0 	2, -15, -5555, 0, ...
		long	8	양의 정수, 음의정수, 0	2L, -15L, -5555L, 0L,...
	실수형 	double	8	소수점이 있는 수		3.14, 5.1, -66.44, 0.0,...
		float	4	소수점이 있는 수		3.14f, 5.1f, 0.0f,...
	논리형	boolean 1	참, 거짓			true, false
	문자형	char	2	문자 한개('')		'a', 'A', '가', '0', ..
	문자열	String	?	문자들의 나열("")		"a", "최장현", "2025년 6월 16일", ...
	
bit(비트)
	컴퓨터가 처리할 수 있는 최소의 데이터 단위
	0, 1

byte
	bit 8개를 묶어서 1byte

문자
	작은 따옴표로 감싸진 1개의 문자

문자열
	문자들의 나열
	큰 따옴표로 감싸진 0개 이상의 문자

2. 변수(Variable)
	어떤 값을 저장하기 위한 저장공간

1) 변수의 특징
	변수는 오직 하나의 자료형만 저장할 수 있다
	변수는 오직 하나의 값만 저장할 수 있다

	=> 하나의 자료형과 하나의 값만 저장할 수 있는 저장공간


2) 변수의 선언과 사용
	변수의 선언(만든다)
		자료형 변수명;
		int number;
		boolean isTrue;	
		char alpha;
	변수에 값을 저장
		변수명 = 값 ;
		number = 100;
		isTrue = true;
		alpha = 'a';
		=(대입연산자)	오른쪽의 값을 왼쪽의 저장공간에 저장한다/대입한다

	변수 선언과 동시에 초기화
		자료형 변수명 = 값;
		int number = 100;

	변수에 저장된 값을 사용하는 방법
		-변수명을 이용한다
	
	여러개의 변수를 선언하는 방법
		자료형 변수명1, 변수명2, 변수명3;
		자료형 변수명1 = 값, 변수명2 = 값, 변수명3 = 값;
		단, 자료형이 같아야만 한다
3)변수 선언시 주의사항
	같은 영역에서(중괄호 안) 같은 이름의 변수를 선언할 수 없다
	되도록 소스코드 위쪽에 한번에 선언한다
	되도록 선언과 동시에 초기화를 한다
	(정수형 0, 실수형 0.0, 문자열 "", 문자형 ' ', 논리형 false)

4) 변수명 주의사항
	문자부터 시작한다
	특수기호 사용 X (단 _와 $만 가능)
	공백 사용 X(카멜표기법,스네이크 표기법 등을 활용)
	키워드(예약어)를 사용할 수 없다
	되도록 소문자로 시작한다(대소문자 구분)
	되도록 의미있는 단어, 문자 사용
	되도록 한글 X

5) 상수(constant)
	한번 값이 지정되면 변경할 수 없는 데이터를 의미한다
	final 키워드를 사용하여 상수를 선언한다

1) 상수 선언
	자료형 변수명 = 값;		//변수 선언(카멜표기법)
	final 자료형 상수명 = 값;	//상수 선언
	상수명은 대문자로 작성하고 단어가 바뀔 떄는 _로 연결한다(스네이크 표기법)

2) 상수 사용시 주의사항
	- 이름 작성 규칙(변수명)
	- 초기화 필수 : final 키워드 사용 시 선언과 동시에 초기화해야한다
	- 불변성 : 한 번 값이 지정되면 변경할 수 없으므로 값을 유지해야 할 때 주로 사용한다

4. 변수를 사용하는 이유(값을 왜 변수에 저장해서 사용하는가?)
	반복되는 값을 쉽게 관리하기 위해서(값을 재사용하기 위함)
	값에 의미를 부여하기 위해서(값에 이름을 붙여준다)
	프로그램의 가독성, 유지보수성, 재사용성을 높이기 위해서

5. 메모리
	java에서는 JVM
	
	프로그램		JAVA프로그램
	프로그램(SW)	프로그램(SW)
				JVM
	OS		OS
	HW		HW	

----------
RAM
----------
Stack
Heap
Method

RAM
	int num;
	num = 10;
	num이라는 이름의 저장공간이 RAM에 할당된다

주소값
	메모리(RAM)에 저장공간이 할당되면 고유한 값인 주소값이 부여된다

<쉽게 비유>
	RAM : 작업 도구를 올려놓는 책상
		프로그램이 실행되는 동안 데이터를 저장하고 사용하는 공간
	변수 : 책상 위의 상자
		데이터를 저장하기 위해 RAM에 만든 이름이 붙은 공간
	주소값 : 상자의 위치
		컴퓨터가 RAM에서 변수를 찾을 때 사용하는 고유 번호

6. 제어문자(Escape Character / Sequence)
   따옴표 안에서 사용되며 미리 예약된 특수한 기능을 하는 문자
   \(백슬래쉬, 역슬래쉬)를 사용한다

   	\n : 줄바꿈
   	\t : 일정 간격을 띄어준다(tab)
   	\" : 문자열안에서 큰따옴표를 표현
   	\' : 문자열안에서 작은 따옴표를 표현
  	 \\ : 문자열안에서 역슬래쉬를 표현

7. 출력 메소드
	소괄호 안에 있는 값을 콘솔창에 출력한다
	
	println()
		소괄호 안에 있는 값을 출력하고 줄바꿈이 된다
	print()
		소괄호 안에 있는 값을 출력하고 줄바꿈이 되지 않는다
	printf()
	 	형식(서식 format)에 맞는 값을 출력하고 줄바꿈이 되지 않는다

1) 출력 메소드의 목적
	개발자가 오류를 해결하기 위해 값을 확인할 때 사용한다

2) 형식 지정자
	printf()	형식지정자를 사용하여 데이터를 특정 형식으로 출력할 수 있다
			줄바꿈은 자동으로 이루어지지 않으며 필요하면 \n을 추가해서 사용한다
	
	출력 형식을 지정한다
	%로 시작하며 printf()에서만 사용가능하다
		
	
8.형변환(Type Casting)
1) 자동형변환
	작은 byte의 값을 큰 byte의 변수에 저장하면 자동으로 형 변환된다
	정수 + 정수 = 정수	
	정수 + 실수 = 실수
	문자는 정수로 자동 형변환된다

2) 강제형변환
	(자료형)값
+) java의 기본자료형
	정수형	int		4byte
		long		8byte
	실수형	double		8byte
		float		4byte
	논리형	boolean		1byte(1bit)
	문자형	char		2byte
	문자열	String		?

+) 형변환 가능성
숫자형 자동 변환
	byte -> short -> int -> long -> float -> double
			↑
			char

	char과 int는 유니코드 숫자로 변환(자동형변환 가능)

+) 형변환 가능성
	byte	short	char	int	long	float	double	boolean
byte	o	o	x	o	o	o	o	x
short	x	o	x	o	o	o	o	x
char	x	x	o	o	o	o	o	x
int	x	x	x	o	o	o	o	x
long	x	x	x	x	o	o	o	x
float	x	x	x	x	x	o	o	x
double	x	x	x	x	x	x	o	x
boolean	x	x	x	x	x	x	x	o



복습
1) 자료형
	정수형
		int	4byte
		long	8byte
	실수형
		double	8byte	15자리
		float	4byte	6자리
	논리형
		boolean	1byte	t/f
	문자형
		char	2byte	''로 감싸진 문자1개	
	문자열
		String	?	""로 감싸진 문자0개이상

2) 변수
	값을 저장하기 위한 저장 공간
	자료형 변수명;
	변수명 = 값;
	
	자료형 변수명 = 값;
	
3) 상수
	변하지 않는 값을 저장하기 위한 저장 공간
	final 자료형 상수명;
	

4) 이스케이프 문자
	문자열 안에서 \로 표현한다
	\n, \t, \', \", \\

5) 출력 메소드
	메소드=()안에 한개의 기능만 함
	println() 소괄호 안에 있는 값을 콘솔에 출력하고 줄바꿈 가능
	print() 소괄호 안에 있는 값을 콘솔에 출력하고 줄바꿈 불가능
	printf() 소괄호 안에 있는 값을 형식에 맞게 콘솔에 출력하고 줄바꿈 불가능

-형식지정자
	%[- or 0][n][.m]서식문자
	%d 
	%o
	%x
	%.2f
	%c
	%.1s 
	.숫자 = 자르기 	

6)형 변환
-자동형변환
	작은 바이트의 값을 큰 바이트의 저장공간에 담을 때
	정수 + 실수 = 실수
	char는 자동정수형으로 변환

-강제형변환
	(자료형)값




